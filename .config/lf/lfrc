# #--- Default settings ---# #
# Second column shows info
set ratios '1:4:3'
# set preview!; set ratios '1:4';
set icons on
set shell 'bash'
set scrolloff 5
set info size:time
# set color256 on
set promptfmt "ðŸ¦„ \033[34;1m%w/\033[0m\033[1m%f\033[0m"
map e edit

# #--- Directory shorcuts ---# #
# map gh cd ~
# map gy cd ~/Downloads/youtube-dl
map gy cd /storage/youtube-dl
map gm cd ~/mnt
map gP cd ~/Pictures
map gs cd ~/Pictures/screenshots
map gd cd ~/Downloads
map gc cd ~/.config
map ge cd ~/edu
map gw cd ~/workspace
map gp jump-to-project-root

# #--- Bindings ---# #
# Disable defaults
map <up>
map <down>
map <left>
map <right>
map y # copy
map d # cut
map p # paste
map yy copy
map dd cut
map pp paste
map pr paste-rsync
map pl link
map w # shell
map S $$SHELL
map <c-s> spawn-new-shell
map dD delete $fx
map P sxiv
map dr dragon
map F fzf
map <c-f> vim-fzf
# map N spawn
map sn
map sn :{{ set sortby natural; set info size:time; }}
map st
map st :{{ set sortby time; set reverse!; set info size:time; }}
map sc
map sc :{{ set sortby ctime; set info size:ctime; }}
map zr
map sr :set reverse!

# #--- EXPERIMENTAL ---# #
map <enter> rifle
map O rifle-sel
map I mediainfo

# #--- cmd Bindings ---# #
# Deleting defaults
cmap <c-b> # cmd-left
cmap <c-f> # cmd-right
cmap <c-j> # cmd-enter
cmap <c-d> # cmd-delete
cmap <c-w> # cmd-delete-unix-word
cmap <c-t> # cmd-transpose
cmap <a-f> # cmd-word
cmap <a-b> # cmd-word-back
cmap <a-c> # cmd-capitalize-word
cmap <a-d> # cmd-delete-word
cmap <a-u> # cmd-uppercase-word
cmap <a-l> # cmd-lowercase-word
cmap <a-t> # cmd-transpose-word
# Rebinding
cmap <up> cmd-history-prev
cmap <down> cmd-history-next

# #--- Custom commands ---# #
cmd usage $du -h -d1 | less

# #--- Previewing Files ---# #
set previewer ~/.config/lf/pv.sh
map xx :{{ set preview!; set ratios '1:4'; }}
map xz :{{ set preview; set ratios '1:4:3'; }}
map i $~/.config/lf/pv.sh $f | less -R

cmd edit ${{
    IFS="`printf '\n\t'`"
    set -- $fx
    if [ $# -gt 1 ]; then
        $EDITOR -d "$@"
    else
        $EDITOR "$@"
    fi
}}

cmd dragon &{{
    IFS="`printf '\n\t'`"
    set -- $fx
    if [ $# -gt 1 ]; then
        ripdrag -s 128 "$@"
    else
        ripdrag -s 128 -x "$@"
    fi
}}

cmd dragon-all &{{
    IFS="`printf '\n\t'`"
    set -- $fx
    ripdrag -s 128 -a -x "$@"
}}

cmd rifle ${{
    IFS="`printf '\n\t'`"
    set -- $fx
    rifle "$@"
}}

cmd rifle-sel ${{
    set -f
    rifle -l "$f"
    read -p "Select runner: " runner
    IFS="`printf '\n\t'`"
    set -- $fx
    rifle -p $runner "$@"
    lf -remote "send $id unselect"
}}

cmd mediainfo ${{
    mediainfo "$f" | less
}}

cmd sxiv &{{
    # Internal File Separator
    IFS="`printf '\n\t'`"
    set -- $fx
    echo "$#"
    echo "$@"
    if [ $# -gt 1 ]; then
        nsxiv -t -o "$@"
        # for l in $(sxiv -t -o "$@"); do
        #   lf -remote "send $id select $l"
        #   lf -remote "send $id toggle $l"
        # done
    else
        nsxiv -t -o .
        # for l in $(sxiv -t -o .); do
        #   lf -remote "send $id select $l"
        #   lf -remote "send $id toggle $l"
        # done
    fi
}}

cmd fzf ${{
    sel="$(fd -t d -t f | fzf --prompt 'jump to ')"
    if [ -d "$sel" ]
    then
        pwd=$PWD
        lf -remote "send $id cd '$sel'"
        lf -remote "send $id echo fzf jump '$pwd' -> '$sel'"
    elif [ -f "$sel" ]
    then
        pwd=$PWD
        lf -remote "send $id select '$sel'"
        lf -remote "send $id echo fzf jump '$pwd' -> '$sel'"
    else
        lf -remote "send $id echo Neither a file or directory"
    fi
}}

cmd vim-fzf ${{
    sel="$(fd -t f | fzf --prompt '$vim ')"
    if [ -f "$sel" ]
    then
        $EDITOR "$sel"
    else
        lf -remote "send $id echo vim-fzf: ESC"
    fi
}}

cmd jump-to-project-root &{{
    root=$(project_root)
    if [ -n "$root" ]
    then
        lf -remote "send $id cd \"$root\""
        lf -remote "send $id echo jump to project root '$root'"
    else
        lf -remote "send $id echoerr can't find project root"
    fi
}}

cmd spawn &cd $PWD && st

# credit: https://github.com/gokcehan/lf/issues/149
cmd bulkrename ${{
    index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
    if [ -n "${fs}" ]; then
        echo "$fs" > $index
    else
        echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
    fi
    index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
    cat $index > $index_edit
    $EDITOR $index_edit
    if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
        max=$(($(cat $index | wc -l)+1))
        counter=1
        while [ $counter -le $max ]; do
            a="$(cat $index | sed "${counter}q;d")"
            b="$(cat $index_edit | sed "${counter}q;d")"
            counter=$(($counter+1))

            [ "$a" = "$b" ] && continue
            [ -e "$b" ] && echo "File exists: $b" && continue
            mv "$a" "$b"
        done
    else
        echo "Number of lines must stay the same"
    fi
    rm $index $index_edit
}}
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd compress ${{
    IFS="`printf '\n\t'`"
    set -- $fx
    compress "$@"
}}

cmd decompress ${{
    IFS="`printf '\n\t'`"
    set -- $fx
    decompress "$@"
}}

# cmd on-cd &{{
#   # display git repository status in your prompt
#   source /usr/share/git/completion/git-prompt.sh
#   GIT_PS1_SHOWDIRTYSTATE=auto
#   GIT_PS1_SHOWSTASHSTATE=auto
#   GIT_PS1_SHOWUNTRACKEDFILES=auto
#   GIT_PS1_SHOWUPSTREAM=auto
#   git=$(__git_ps1 " (%s)") || true
#   fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w/\033[0m\033[1m%f$git\033[0m"
#   lf -remote "send $id set promptfmt \"$fmt\""
# }}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    IFS="`printf '\n\t'`"
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd delete-links ${{
    IFS="`printf '\n\t'`"
    set -- $fx
    ls -l "$@"
}}

cmd spawn-new-shell &{{
    alacritty msg create-window --working-directory "$PWD"
}}

cmd paste-rsync &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -a --ignore-existing --info=progress2 -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd mpv-sub &{{
    IFS="`printf '\n\t'`"
    set -- $fx
    mpv --sub-file="$2" "$1"
}}
