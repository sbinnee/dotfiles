#!/usr/bin/python
# Euro foreign exchange reference rates (90 days)
# https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html

import sys
from os import path
import logging
from logging.handlers import RotatingFileHandler
import socket
import requests
import time
import xml.etree.ElementTree as ET
import json
from datetime import datetime, date, timezone, timedelta
import argparse

desc = """
Currency module: Fetch data from ECB (European Central Bank) and print out currency rate based on EUR.
"""
parser = argparse.ArgumentParser(description=desc)

parser.add_argument('--log-file', type=str, default='~/.cache/currency.log',
        help="Set path to log file, default is '~/.cache/currency.log'")
parser.add_argument('--data-file', type=str, default='~/.cache/currency.json',
        help="Set path to data file, default is '~/.cache/currency.json'")
parser.add_argument('--currency', type=str, default='KRW',
        help="Set currency, default is 'KRW'")
parser.add_argument('--date', action='store_true',
        help='Print date')
parser.add_argument('-c', '--color', action='store_true',
        help='Apply color format for polybar')
args = parser.parse_args()

# Logging
LOG_FILE = path.expanduser(args.log_file)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(name)s:%(message)s')

file_handler = RotatingFileHandler(LOG_FILE, mode='a', maxBytes=5*1024**2, backupCount=0)
# file_handler = logging.FileHandler(LOG_FILE)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# Argument and global arguments
CURRENCY = args.currency.upper()
logger.info(f"Currency is set to '{CURRENCY}'")
URL = 'https://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist-90d.xml?ba5b34484fcd501300580a7ff639c8dd'
DATA_FILE = path.expanduser(args.data_file)


# # Matplot config
# years = mdates.YearLocator()   # every year
# months = mdates.MonthLocator()  # every month
# days = mdates.DayLocator(bymonthday=[7, 14, 21, 28])  # every day
# months_fmt = mdates.DateFormatter('%b')

# # Get xml format
def get_from_ecb(url=URL):
    conn = False
    for i in range(5):
        ip_a = socket.gethostbyname(socket.gethostname())
        logger.info('Check internet connection')
        if ip_a == '127.0.0.1' or ip_a == '127.0.1.1':
            conn = False
            logger.info(f'No internet! {i} second(s) passed')
        else:
            conn = True
            logger.info('Internet connected')
            break
        time.sleep(1)
    if not conn:
        print('No internet')
        sys.exit(1)
    ok = False
    num_try = 0
    while not ok and num_try < 5:
        num_try += 1
        try:
            res = requests.get(url)
        except:
            logger.info(f"Error occurred! Tried {num_try} times")
        ok = res.ok
        time.sleep(1)
    if not ok and num_try >= 5:
        print('ERROR')
    # if not res.ok:
    #     print(f'NOT OK ({res.status_code})')
    #     return None
    return parse_xml(res.text)

def parse_xml(xml):
    # Parse xml into dict
    root = ET.fromstring(xml)
    subject = root[0].text
    name = root[1][0].text
    cube = root[2]

    data = []
    for child in cube:
        time = child.attrib['time']
        rate = {'time': time}
        for c in child:
            att = c.attrib
            rate[att['currency']] = att['rate']
        data.append(rate)
    return data

def save_data(data):
    logger.info(f"Saving data")
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)
    logger.info(f"Saved data to '{DATA_FILE}'")

def load_data():
    logger.info('Loading data')
    if path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
        logger.info(f"Loaded data from '{DATA_FILE}'")
    else:
        logger.info(f"File '{DATA_FILE} does not exist")
        return False
    return data

def is_time_equal(old_data, new_data):
    return old_data[0]['time'] == new_data[0]['time']

def print_std(data):
    time0 = data[0]['time']
    res0 = float(data[0][CURRENCY])
    time1 = data[1]['time']
    res1 = float(data[1][CURRENCY])
    diff = float(res0) - float(res1)
    std = f'{res0:.1f}({diff:+.1f})'
    if args.color:
        c = '#00fa9a' if diff > 0 else '#ff4500'
        std = f'{res0:.1f}'f'%{{F{c}}}'f'({diff:+.1f})''%{F-}'
    if args.date:
        std = ' '.join([time0, std])
    print(std)

if __name__ == '__main__':
    # All time is based on UTC+00
    utc = timezone.utc
    now = datetime.now(utc)
    today = now.date().today()
    # The reference rates from ECB are usually updated around 16:00 CET on every
    # working day. There is +10 mins to make sure the script would be run after
    # the update.
    time_update = datetime(now.year, now.month, now.day,
            hour=16, minute=10, tzinfo=utc)
    # print('utc:', utc)
    # print('now:', now)
    # print('today:', today)
    # print('time_update:', time_update)

    # Check
    data = load_data()
    if not data:
        logger.info('Getting data from ECB')
        # GET
        new_data = get_from_ecb()
        save_data(new_data)
        print_std(new_data)
        sys.exit(0)

    if now.weekday() < 5:
        # Check when was the last update
        last_update = data[0]['time']
        last_update = date.fromisoformat(last_update)
        logger.info(f'last_update: {last_update}')
        logger.info(f"today - last_update = '{today - last_update}'")
        if today > last_update:
            # one day is fine
            if last_update == today - timedelta(days=1):
                logger.info(f'Last update was done yesterday')
                if now > time_update:
                    logger.info('Time to update')
                    logger.info('Getting data from ECB')
                    # GET
                    new_data = get_from_ecb()
                    logger.info(new_data[0])
                    if is_time_equal(data, new_data):
                        logger.info('Old data is equal to new data')
                    else:
                        save_data(new_data)
                else:
                    logger.info("Update will be available today after 16:10 (UTC+00)")
            # Else is not fine
            else:
                logger.info("Last update is outdated")
                logger.info('Getting data from ECB')
                # GET
                new_data = get_from_ecb()
                logger.info(new_data[0])
                if is_time_equal(data, new_data):
                    logger.info('Old data is equal to new data')
                else:
                    save_data(new_data)
        else:
            logger.info('Already updated today')
    else:
        logger.info(f"Today is weekend ({now.strftime('%A')})")

    data = load_data()
    print_std(data)
    sys.exit(0)
